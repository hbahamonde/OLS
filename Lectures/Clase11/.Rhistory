cat("\014")
rm(list=ls())
graphics.off()
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(foreign) # significa "foraneo"
dat <- read.dta("cow.dta") # cargar base en  R (hasta el momento solo la habiamos descargado).
# Siempre inspeccionar base
head(dat)
# Siempre inspeccionar base
options(scipen=9999999)
head(dat)
pj = data.frame(
nombre=c("Pedro", "Juan"),
nota.en.matematicas=c(3,5)
)
pj # ve como se ve el objeto "pj".
lm(pj$nota.en.matematicas ~ pj$nota.en.matematicas) # Error
data.frame(
nombre=c("Pedro", "Juan"),
nota.en.matamticas=c(3,5)
)
# La matriz se llama "x".
x = matrix(
c(3,5,3,5),
ncol = 2
)
x
t(x) # Ok, es posible
t(x) %*% x # Ok, es posible
p_load(matlib) # para invertir matrices
summary(lm(repression ~ democracy + democracy, dat)) # Que paso aqui?
summary(lm(repression ~ democracy + democracy2, dat)) # Que paso aqui?
# Forcemos a R a hacerlo
# Intento 2
dat$democracy2 = dat$democracy # Enganando a R...
summary(lm(repression ~ democracy + democracy2, dat)) # Que paso aqui?
# Ejemplo 1: Colinearidad Perfecta (de nuevo)
m1 = matrix(c(3,5,3,5), ncol = 2) # Define matrix "m"
m1 # ve como se ve la matrix "m1"
options(scipen=10000) # Apaga la notacion cientifica
# toma la determinante de matrix "m1"
det(m1) # da practicamente 0. Eso es "malo" (la matriz no es invertible).
cat("\014")
rm(list=ls())
graphics.off()
# Cargar Pacman
if (!require("pacman")) install.packages("pacman"); library(pacman)
# Cargar paquete para cargar bases que no son de R.
p_load(foreign) # significa "foraneo"
dat <- read.dta("cow.dta") # cargar base en  R (hasta el momento solo la habiamos descargado).
head(dat)
summary(dat)
modelo.1 = lm(rgdpch ~ democracy + pop)
dat <- read.dta("cow.dta") # cargar base en  R (hasta el momento solo la habiamos descargado).
modelo.1 = lm(rgdpch ~ democracy + pop)
dat
modelo.1 = lm(rgdpch ~ democracy + pop, dat)
modelo.1
summary(modelo.1)
# obtener intervalos de confianza
cofint(modelo.1)
# obtener intervalos de confianza
confint(modelo.1)
# obtener intervalos de confianza
confint(modelo.1, level = 0.95)
confint(modelo.1, level = 0.99) # 99% de confianza
# plotear CI
plot(allEffects(model.1))
# plotear CI
p_load(effects())
# plotear CI
install.packages("effects")
library(effects)
plot(allEffects(model.1))
plot(allEffects(modelo.1))
# install.packages("lattice")
library(lattice)
density(dat$democracy)
densityplot(dat$democracy)
mean(dat$democracy)
# plotear CI
# install.packages("coefplot")
library(coefplot)
install.packages("coefplot")
# plotear CI
# install.packages("coefplot")
library(coefplot)
coefplot(modelo.1)
# OK. Calculemos el error estandard de b1 (democracy)
predict.lm(modelo.1)
# OK. Calculemos el error estandard de b1 (democracy)
y.prima = predict(modelo.1)
# OK. Calculemos el error estandard de b1 (democracy)
y.prima = predict(modelo.1) # calcular el valor esperado
y = dat$rgdpch # extraer el valor observado
(y.prima - y)^2/nrow(dat)-2
a = (y.prima - y)^2
nrow(dat)-2
a
a = (y.prima - y)^2
b = a/nrow(dat)-2
b
sum((y.prima - y)^2)
sum((y.prima - y)^2)/nrow(dat)-2
summary(modelo.1)
?sum
y.prima - y
(y.prima - y)^2
sum((y.prima - y)^2)
sqrt(sum((y.prima - y)^2)/nrow(dat)-2)
summary(modelo.1)
sqrt(
sum(
(y.prima - y)^2/nrow(dat)-2
)
)
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2
)
sum((y.prima - y)^2)
y.prima
y
y
y.prima
# OK. Calculemos el error estandard de b1 (democracy)
y.prima = as.vector(predict(modelo.1)) # calcular el valor esperado
y.prima
# OK. Calculemos el error estandard de b1 (democracy)
y.prima = as.vector(predict(modelo.1)) # calcular el valor esperado
y = dat$rgdpch # extraer el valor observado
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2
)
y.prima
y
# OK. Calculemos el error estandard de b1 (democracy)
y.prima = as.vector(predict(modelo.1)) # calcular el valor esperado
y = dat$rgdpch # extraer el valor observado
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2
)
nrow(dat)
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2
)
summary(modelo.1)
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2
)
sqrt(
sum((y.prima - y)^2) /(nrow(dat)-2)* sum(dat$democracy-mean(democracy))
)
sqrt(
sum((y.prima - y)^2) /(nrow(dat)-2)* sum(dat$democracy-mean(dat$democracy))
)
sum((y.prima - y)^2)
(nrow(dat)-2
(nrow(dat)-2)
((y.prima - y)^2) /nrow(dat)-2)
((y.prima - y)^2 /nrow(dat)-2)
sum((y.prima - y)^2)
sum((y.prima - y)^2) /nrow(dat)-2
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2 / sum(dat$democracy-mean(dat$democracy))
)
summary(modelo.1)
sqrt(
sum((y.prima - y)^2) /nrow(dat)-2 / sum((dat$democracy-mean(dat$democracy))^2)
)
mean(dat$democracy)
(y.prima - y)^2
sum((y.prima - y)^2)
sqrt(
(sum((y.prima - y)^2) / nrow(dat)-2) / sum((dat$democracy-mean(dat$democracy))^2)
)
dat$democracy-mean(dat$democracy
dat$democracy-mean(dat$democracy)
(dat$democracy-mean(dat$democracy))^2
sum((dat$democracy-mean(dat$democracy))^2)
sqrt(
(sum((y.prima - y)^2) / nrow(dat)-2) / sum((dat$democracy-mean(dat$democracy))^2)
)
e = y.prima - y
x = dat$democracy
(t(e) %*% e)/nrow(dat)-2
library(matlib)
((t(e) %*% e)/nrow(dat)-2) %*% inv(t(x) %*% x)
inv(t(x) %*% x)
((t(e) %*% e)/nrow(dat)-2)
t(x)
x = as.vector(dat$democracy)
((t(e) %*% e)/nrow(dat)-2) %*% inv(t(x) %*% x)
x
t(x) %*% x
