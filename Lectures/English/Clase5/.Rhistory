geom_point(aes(shape=state, y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(shape=state, y=inmetro), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(shape=state, y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(shape=state, y=percadultpoverty), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(shape=state, y=poptotal), colour = "red", size=3, alpha=0.5) +
geom_point(aes(shape=state, y=percadultpoverty), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(shape=state, y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(shape=state, y=log(inmetro)), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(shape=state, y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(shape=state, y=percblack), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(midwest, aes(x=area)) +
geom_point(aes(shape=state, y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(shape=state, y=percblack), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=poptotal), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=3, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=1, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=log(area=1))) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=log(area+1))) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos).
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
divorce_margarine
ggplot(divorce_margarine, aes(x=year)) +
geom_point(aes(y=divorce_rate_maine), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=margarine_consumption_per_capita), colour = "green", size=2, alpha=0.5) +
theme_bw()
ggplot(divorce_margarine, aes(x=year)) +
geom_point(aes(y=divorce_rate_maine), size=3, alpha=0.5) +
geom_point(aes(y=margarine_consumption_per_capita), size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(divorce_margarine, aes(x=year)) +
geom_point(aes(y=divorce_rate_maine), size=3, alpha=0.5) +
geom_point(aes(y=margarine_consumption_per_capita), size=2, alpha=0.5)
View(olive)
is(olive$area)
levels(olive$area)
admissions
is(admissions$gender)
divorce_margarine
ggplot(divorce_margarine, aes(x=year)) +
geom_point(aes(y=divorce_rate_maine), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=margarine_consumption_per_capita), colour = "green", size=2, alpha=0.5)
ggplot(divorce_margarine, aes(x=year)) +
geom_point(aes(y=log(divorce_rate_maine)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=margarine_consumption_per_capita), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
ggplot(divorce_margarine, aes(x=year)) +
geom_point(aes(y=divorce_rate_maine), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=log(margarine_consumption_per_capita)), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
margarine_consumption_per_capita
View(polls_2008)
load("/Users/hectorbahamonde/Downloads/ICPSR_35299/DS0001/35299-0001-Data.rda")
load(".../ICPSR_35299/DS0001/35299-0001-Data.rda")
load("/../ICPSR_35299/DS0001/35299-0001-Data.rda")
load("/ICPSR_35299/DS0001/35299-0001-Data.rda")
View(da35299.0001)
install.packages("prettyR")
library(prettyR)
lbls <- sort(levels(da99999.0001$MYVAR))
base = da35299.0001
base$ACTIV_1A
table(base$ACTIV_1A)
table(base$ACTIV_1C)
plot(P5, P128)
plot(base$P5, base$P128)
plot(base$P128, base$P5)
base$P128
plot(base$P128, as.factor(base$P5))
plot(as.factor(base$P128), as.factor(base$P5))
plot(as.numeric(base$P128), as.factor(base$P5))
plot(as.factor(base$P128), as.numeric(base$P5))
base$P5
plot(as.factor(base$P128), P8_1)
plot(as.factor(base$P128), base$P8_1)
base$P8_1
plot(as.factor(base$P128), as.factor(base$P8_1))
base$P114
plot(base$P114)
hist(base$P114)
plot(base$P114, base$P128) # numerica
plot(base$P114, as.factor(base$P128)) # numerica
plot(base$P114) # numerica
hist(base$P114) # numerica
summary(base$P114) # numerica
base$P132_1
hist(base$P132_1)
hist(base$p132_1)
hist(as.numeric(base$P132_1))
?sim
help(sim)
??simulation
?rnorm
dnorm(100, mean = 0, sd = 1, log = FALSE)
dnorm(100, mean = 0, sd = 1)
dnorm(3, mean = 0, sd = 1)
rep(dnorm(3, mean = 0, sd = 1), 100)
replicate(dnorm(3, mean = 0, sd = 1), 100)
replicate(100, dnorm(3, mean = 0, sd = 1))
system.time(
x1 <- replicate(reps, sum(rexp(n=nexps, rate=rate)))
)
reps <- 50000
nexps <- 5
rate <- 0.1
set.seed(0)
replicate(reps, sum(rexp(n=nexps, rate=rate)))
replicate(reps, dnorm(3, mean = 0, sd = 1))
replicate(reps, sum(dnorm(3, mean = 0, sd = 1)))
replicate(reps, sum(dnorm(4, mean = 0, sd = 1)))
rnorm(1000, 0, 1)
set.seed(0)
rnorm(1000, 0, 1)
plot(rnorm(1000, 0, 1))
hist(rnorm(1000, 0, 1))
rnorm(1000, 0, 1)
rnorm(12000, 0, 1)
uno = rnorm(12000, 0, 1)
log(uno)
abs(uno)
help(abs)
sqrt(log(uno))
abs(log(uno))
log(sqrt(uno))
uno = rnorm(12000, 0, 1)
sqrt(uno)
uno
##
set.seed(198911)
rpois(100,5)
rnorm(12000, 0, 1)
exp(rnorm(12000, 0, 1))
# cargar libreria
library(ggplot2)
options(scipen=999) # Apagar notacion cientifica
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() # Logeado
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() + geom_smooth(method="lm") # con linea
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=3) + geom_smooth(method="lm") # Color azul
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Forma del punto, segun estado.
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() #  Cambio de "tema de colores"
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'") # Cambio en los titulos de los ejes.
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos). Este tipo de graficos se usa cuando queremos observar la relacion ente dos variables. Aqui no vemos que haya una relacion clara.
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=percblack), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos). Este tipo de graficos se usa cuando queremos observar la relacion ente dos variables. Aqui no vemos que haya una relacion clara.
ggplot(midwest, aes(x=area)) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=log(percblack)), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# en este grafico usamos geom_point dos veces. una para poner los puntos del log(poptotal) y otra para los puntos de "percblack" (% de Afro americanos). Este tipo de graficos se usa cuando queremos observar la relacion ente dos variables. Aqui no vemos que haya una relacion clara.
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=log(percblack)), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# agreguemosle un poco de color...pero con algo mas de significado.
ggplot(data = world) + geom_sf(aes(fill = pop_est)) + scale_fill_viridis_c(option = "plasma", trans = "sqrt") # poblacion estimada.
library("sf")
library("rnaturalearth") # libreria con todos los mapas del mundo
library("rnaturalearthdata") # libreria complementaria de "rnaturalearth"
#
world <- ne_countries(scale = "medium", returnclass = "sf")
# grafico basico del mundo
ggplot(data = world) + geom_sf()
# agreguemosle un poco de color...
ggplot(data = world) + geom_sf(color = "black", fill = "lightgreen") # pero esta coloracion no aporta mucha informacion...
# agreguemosle un poco de color...pero con algo mas de significado.
ggplot(data = world) + geom_sf(aes(fill = pop_est)) + scale_fill_viridis_c(option = "plasma", trans = "sqrt") # poblacion estimada.
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
# Plot mas complejo de Sudamerica
world_points<- st_centroid(world) # declaremos los nombres de los paises segun coordenadas.
world_points # veamos...
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry))) # "column bind" (haciendo MERGE...nuestra base de datos con latitud/longitud, y otra base con "world_points", es decir, nombres de los paises)
# ahora ocupemos la misma base de datos para plotear Sudametica, pero con el nombre de los paises.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12)) + geom_text(data= world_points,aes(x=X, y=Y, label=name), color = "darkblue", fontface = "bold", check_overlap = FALSE)
## ---- list:analysis:data ----
# cat("\014")
# rm(list=ls())
# Load Data
load("/Users/hectorbahamonde/RU/research/Vote_Selling/dat_list.RData") # Load data
# customization of ictreg
options(scipen=999)
method = as.character("ml")
maxIter = as.numeric(200000)
##############
# List Low Condition
##############
## subseting leaving only LOW treatment condition
dat.low <- dat[ which(dat$treatlow==1 | dat$treatment==0), ]
# dropping rows with missing data
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
dat.low = completeFun(dat.low,
c(
#"age.n",
#"woman",
"socideo",
"partyid",
#"reg",
#"trustfed",
"income.n",
"educ.n"#,
#"polknow"
)
)
## Setting tolerance
options(scipen=999)
options(digits=2)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(list)
ci.level  = 0.95
list.low <- ictreg(ycount ~
#age.n +
#woman +
socideo +
partyid +
#reg +
#trustfed +
income.n +
educ.n,# +
#polknow,
data = dat.low,
treat = "treatment",
J=3,
method = method,
maxIter = maxIter)
summary(list.low, n.draws = 200000)
head(dat.low)
dat.low$treatment
table(dat.low$treatment)
is(dat.low$treatment)
summary.ictreg(list.low)
cat("\014")
rm(list=ls())
# Load Data
load( "/Users/hectorbahamonde/RU/research/Vote_Selling/dat_list.RData") # Load data
# Difference in means
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(list)
dif.means <- ictreg(ycount ~ 1, data = dat, treat = "treatment", J=3, method = "lm")
sum.dif.means <- summary(dif.means, n.draws = 400000) # quasi-Bayesian approximation based predictions
sum.dif.means <- summary(dif.means, n.draws = 400000) # quasi-Bayesian approximation based predictions
sum.dif.means
data(race) set.seed(1) # Calculate list experiment difference in means
diff.in.means.results <- ictreg(y ~ 1, data = race, treat = "treat", J=3, method = "lm")
summary(diff.in.means.results)
race$y
table(race$y)
table(dat$ycount)
plot(sum.dif.means)
sens.est = as.numeric(as.character(summary(sum.dif.means))[1])
sens.se = as.numeric(as.character(summary(sum.dif.means))[2])
sens.est
sum.dif.means <- summary(dif.means, n.draws = 400000) # quasi-Bayesian approximation based predictions
sens.est = as.numeric(as.character(summary(sum.dif.means))[1])
sens.est
summary(sum.dif.means)
as.character(summary(sum.dif.means))[1]
sum.dif.means$par.treat
sum.dif.means$par.control
sum.dif.means$par.treat[1]
sum.dif.means$par.treat[1,]
sum.dif.means$par.treat[,1]
sum.dif.means$par.treat[]
as.numeric(sum.dif.means$par.treat[])
as.numeric(sum.dif.means$par.treat)
sum.dif.means$par.treat
sum.dif.means$se.treat
as.numeric(sum.dif.means$se.treat)
sens.est = as.numeric(sum.dif.means$par.treat)
sens.est
cont.est = as.numeric(sum.dif.means$par.control)
cont.se = as.numeric(sum.dif.means$se.control)
cont.est
cont.se
# compute Cis [sens]
sens.upper = sens.est + 1.96*sens.se
sens.lower = sens.est - 1.96*sens.se
cont.upper = cont.est + 1.96*cont.se
cont.lower = cont.est - 1.96*cont.se
diff.means.plot.d = data.frame(
Variable = c("Sensitive", "Control"),
Estimates = c(sens.est, cont.est),
upper = c(sens.upper,cont.upper),
lower = c(sens.lower,cont.lower)
)
diff.means.plot.d
sens.est
sens.se
sum.dif.means$se.treat
sens.se = as.numeric(sum.dif.means$se.treat)
sens.se
cont.est = as.numeric(sum.dif.means$par.control)
cont.se = as.numeric(sum.dif.means$se.control)
sum.dif.means <- summary(dif.means, n.draws = 400000) # quasi-Bayesian approximation based predictions
sens.est = as.numeric(sum.dif.means$par.treat)
sens.se = as.numeric(sum.dif.means$se.treat)
cont.est = as.numeric(sum.dif.means$par.control)
cont.se = as.numeric(sum.dif.means$se.control)
# compute Cis [sens]
sens.upper = sens.est + 1.96*sens.se
sens.lower = sens.est - 1.96*sens.se
# compute Cis [cont]
cont.upper = cont.est + 1.96*cont.se
cont.lower = cont.est - 1.96*cont.se
# construct DF
diff.means.plot.d = data.frame(
Variable = c("Sensitive", "Control"),
Estimates = c(sens.est, cont.est),
upper = c(sens.upper,cont.upper),
lower = c(sens.lower,cont.lower)
)
diff.means.plot.d
p_load(ggplot2)
ggplot(diff.means.plot.d, aes(
x = Variable,
y = Estimates,
ymin = upper,
ymax = lower)) +
geom_pointrange() +
geom_hline(yintercept = 0, colour = gray(1/2), lty = 2) +
coord_flip() +
xlab("") +
ylab("Coefficient") +
#ggtitle("Predicting Vote Selling: Broken Democratic Dimensions")+
guides(colour=FALSE) +
theme(legend.position="none") +
theme_bw()
diff.means.plot.d
(1.116 - 0.069)*100
(1.116 - 0.069)
as.numeric(1.116 - 0.069)
1.116-0.069
1.116-0.069
round(1.116-0.069, 5)
round(0.069-1.116, 6)
1.116-0.069
data(race) set.seed(1) # Calculate list experiment difference in means
diff.in.means.results <- ictreg(y ~ 1, data = race, treat = "treat", J=3, method = "lm")
summary(diff.in.means.results)
2.1-0.068
dif.means
1.116-0.069
data(race) set.seed(1) # Calculate list experiment difference in means
diff.in.means.results <- ictreg(y ~ 1, data = race, treat = "treat", J=3, method = "lm")
summary(diff.in.means.results)
cat("\014")
rm(list=ls())
dev.off()
dev.off()
cat("\014")
rm(list=ls())
# cargar libreria
library(ggplot2)
options(scipen=999) # Apagar notacion cientifica
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
ggplot(midwest, aes(x=area, y=poptotal))
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
log(poptotal)
log(midwest$poptotal)
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() # Logeado
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=3) + geom_smooth(method="lm") # Color azul
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=1) + geom_smooth(method="lm") # Color azul
colnames(midwest)
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col="state"), size=3) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3) + geom_smooth(method="lm") # Color by state
midwest$state
as.factor(midwest$state)
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=0.5) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=1) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=0.7) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=3, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=1, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Forma del punto, segun estado.
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() #  Cambio de "tema de colores"
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Poblacion", y="Poblacion (log)", x="Area (log)", caption="Base de datos 'Midwest'") # Cambio en los titulos de los ejes.
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=log(percblack)), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# cargamos algunas de estas librerias
library("ggplot2")
theme_set(theme_bw()) # seteamos el tema "black and white" para no tener ese fondo plomo que siempre tiene GGPLOT. Se ve mejor, mas limpio.
library("sf")
library("rnaturalearth") # libreria con todos los mapas del mundo
library("rnaturalearthdata") # libreria complementaria de "rnaturalearth"
#
world <- ne_countries(scale = "medium", returnclass = "sf")
world
View(world)
?sf
# grafico basico del mundo
ggplot(data = world) + geom_sf()
# agreguemosle un poco de color...
ggplot(data = world) + geom_sf(color = "black", fill = "lightgreen") # pero esta coloracion no aporta mucha informacion...
# agreguemosle un poco de color...pero con algo mas de significado.
ggplot(data = world) + geom_sf(aes(fill = pop_est)) + scale_fill_viridis_c(option = "plasma", trans = "sqrt") # poblacion estimada.
ggplot(data = world) + geom_sf(aes(fill = pop_est))
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
ggplot(data = world) + geom_sf()
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(84, 35), ylim = c(55, 12))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(84, 35), ylim = c(55, 12))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(84, 35), ylim = c(55, -12))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(84, -35), ylim = c(-55, 12))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(25, 35), ylim = c(20, 30))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(25, 35), ylim = c(10, 30))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(25, 55), ylim = c(10, 30))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(10, 55), ylim = c(10, 30))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(10, 55), ylim = c(2, 30))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(10, 55), ylim = c(10, 30))
# tratemos de plotear el Sudamerica...para eso, cambiamos las coordenadas.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
st_centroid(world)
# Plot mas complejo de Sudamerica
world_points<- st_centroid(world) # declaremos los nombres de los paises segun coordenadas.
world_points
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry))) # "column bind" (haciendo MERGE...nuestra base de datos con latitud/longitud, y otra base con "world_points", es decir, nombres de los paises)
world_points
# ahora ocupemos la misma base de datos para plotear Sudametica, pero con el nombre de los paises.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12)) + geom_text(data= world_points,aes(x=X, y=Y, label=name), color = "darkblue", fontface = "bold", check_overlap = FALSE)
# ahora ocupemos la misma base de datos para plotear Sudametica, pero con el nombre de los paises.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12)) + geom_text(data= world_points,aes(x=X, y=Y, label=name), color = "darkblue", fontface = "bold", check_overlap = T)
# ahora ocupemos la misma base de datos para plotear Sudametica, pero con el nombre de los paises.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12)) + geom_text(data= world_points,aes(x=X, y=Y, label=name), color = "darkblue", fontface = "bold", check_overlap = FALSE)
