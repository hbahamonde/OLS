Prestige$type,
c("bc"="tecnico",
"prof"="profesional",
"wc"="oficinista")
)
Prestige$type.2
select(Prestige,-c(type, census, prestige, prestige.2))
### OK. DF1 tendra todo menos type, census, prestige y prestige.2
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, type.2))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos type, census, prestige
Prestige.drop.2 = select(Prestige,-c(education, women))
Prestige.drop.2
colnames(Prestige.drop.2)
### OK. DF2 tendra todo menos type, census, prestige
Prestige.drop.2 = select(Prestige,-c(education, women, type.2))
colnames(Prestige.drop.2)
colnames(Prestige.drop.1)
colnames(Prestige.drop.2)
Prestige.drop.1$income
Prestige.drop.1$income == Prestige.drop.2$income
-c(Prestige.drop.1$income) == Prestige.drop.2$income
?merge
Prestige.merge <- merge(-c(Prestige.drop.1), Prestige.drop.2,by=c("income"), sort = FALSE)
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income"
Prestige.drop.1$income = -c(Prestige.drop.1$income)
Prestige.merge <- merge(Prestige.drop.1$income, Prestige.drop.2,by=c("income"), sort = FALSE)
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2,by=c("income"), sort = FALSE)
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2,by=c("income"), sort = T)
Prestige.drop.1$income == Prestige.drop.2$income
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2,by=c("income") )
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
Prestige.merge
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, type.2))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women, type.2))
colnames(Prestige.drop.2)
############################################
# Merging: añadiendo columnas
############################################
### Problema: ahora queremos hacer un "merge" (*pegar columnas*) de las dos DF's. El unico elemento en comun, es la variable "income".
# Antes habiamos "merged" usando una variable categorica ("woman"). Ahora "mergiemos" una variable numerica. Para ello, tenemos que asegurarnos que la variable en comun es exactamente igual.
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
-c(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income"
Prestige.drop.1$income = -c(Prestige.drop.1$income)
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
Prestige.merge
as.data.frame(Prestige.merge)
data.frame(Prestige.merge)
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
load(Prestige)
load("Prestige")
load(Prestige)
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
cat("\014")
rm(list=ls())
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
load(Prestige)
## Resumen del df
head(Prestige)
library(carData)
Prestige$education
ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
head(Prestige)
## Funcion if/else
ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
## Revisemos
View(Prestige)
## Funcion if/else
Prestige$prestige.2 = ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
is(Prestige$type) # que tipo de objeto es este?
levels(Prestige$type) # que etiquetas tiene?
library(dplyr)
### que columnas tiene el DF Prestige?
colnames(Prestige)
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, type.2))
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women, prestige.2))
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
# Antes habiamos "merged" usando una variable categorica ("woman"). Ahora "mergiemos" una variable numerica. Para ello, tenemos que asegurarnos que la variable en comun es exactamente igual.
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
-c(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income"
Prestige.drop.1$income = -c(Prestige.drop.1$income)
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
data.frame(Prestige.merge)
merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
data.frame(Prestige.merge)
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"), sort = T)
data.frame(Prestige.merge)
Prestige.drop.1
View(as.data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
View(data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
rev(Prestige.drop.1$income)
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income"
Prestige.drop.1$income = rev(Prestige.drop.1$income)
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
Prestige.merge
Prestige.drop.1
Prestige.drop.2
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"), sort = T)
Prestige.merge
View(data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
-c(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income"
Prestige.drop.1$income = rev(Prestige.drop.1$income)
View(data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
ev(Prestige.drop.1$income)
rev(Prestige.drop.1$income)
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women, prestige.2))
colnames(Prestige.drop.2)
# Antes habiamos "merged" usando una variable categorica ("woman"). Ahora "mergiemos" una variable numerica. Para ello, tenemos que asegurarnos que la variable en comun es exactamente igual.
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income"
Prestige.drop.1$income = rev(Prestige.drop.1$income)
Prestige.drop.1$income
View(data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))  # sort = T
Prestige.merge
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"), sort = T)  # sort = T
Prestige.merge
Prestige$prestige
# OK. Para mostrar como anadir filas, partamos la base Prestige en dos: en las profesiones con "alto" y "bajo" prestigio.
Prestige$prestige.2 <- ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más altas. Usemos la var que habiamos creado antes ("prestige.2").
Prestige.alto <- Prestige[(Prestige$prestige.2=="alto"),]
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más bajo.
Prestige.bajo <- Prestige[(Prestige$prestige.2=="bajo"),]
Prestige.bajo
# Esto funciona si tenemos poquitas obs. Pero si tenemos muchas, es mejor organizar el resultado en una tabla.
table(Prestige.drop.1$income == Prestige.drop.2$income)
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women, prestige.2))
colnames(Prestige.drop.2)
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Esto funciona si tenemos poquitas obs. Pero si tenemos muchas, es mejor organizar el resultado en una tabla.
table(Prestige.drop.1$income == Prestige.drop.2$income)
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# Tabla
table(Prestige.drop.1$income == Prestige.drop.2$income)
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# Tabla
table(Prestige.drop.1$income == Prestige.drop.2$income)
debugSource('~/RU/Teaching/Metodos_Cuanti_I/Lectures/Clase4/clase4.R', echo=TRUE)
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# Tabla
table(Prestige.drop.1$income == Prestige.drop.2$income)
Prestige.drop.1$income
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
colnames(Prestige)
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women, prestige.2))
colnames(Prestige.drop.2)
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
## Resumen del df
head(Prestige)
library(dplyr)
### que columnas tiene el DF Prestige?
colnames(Prestige)
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige, prestige.2))
colnames(Prestige.drop.1)
### OK. DF1 tendra todo menos "education", "income", "women"
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
colnames(Prestige.drop.1)
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women))
colnames(Prestige.drop.2)
# Antes habiamos "merged" usando una variable categorica ("woman"). Ahora "mergiemos" una variable numerica. Para ello, tenemos que asegurarnos que la variable en comun es exactamente igual.
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Esto funciona si tenemos poquitas obs. Pero si tenemos muchas, es mejor organizar el resultado en una tabla.
table(Prestige.drop.1$income == Prestige.drop.2$income)
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# Tabla
table(rev(Prestige.drop.1$income) == Prestige.drop.2$income)
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
Prestige.drop.1 = select(Prestige,-c(type, census, prestige))
### OK. DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women))
Prestige.drop.1$income == Prestige.drop.2$income
# Esto funciona si tenemos poquitas obs. Pero si tenemos muchas, es mejor organizar el resultado en una tabla.
table(Prestige.drop.1$income == Prestige.drop.2$income)
# Antes habiamos "merged" usando una variable categorica ("woman"). Ahora "mergiemos" una variable numerica. Para ello, tenemos que asegurarnos que la variable en comun es exactamente igual.
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
# Esto funciona si tenemos poquitas obs. Pero si tenemos muchas, es mejor organizar el resultado en una tabla.
table(Prestige.drop.1$income == Prestige.drop.2$income)
# Que pasaria si revertimos el orden de una columna (usando "-c()"), entendera R que en verdad hablamos de lo mismo? Veamos
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income". Ocuparemos un comando para hacer un "reverse", y poner todo al reves.
Prestige.drop.1$income = rev(Prestige.drop.1$income) # "rev" de "reverse"
# Veamos que hicimos...
View(data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
Prestige.merge
# OK. Para mostrar como anadir filas, partamos la base Prestige en dos: en las profesiones con "alto" y "bajo" prestigio.
Prestige$prestige.2 <- ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
Prestige$prestige.2
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más altas. Usemos la var que habiamos creado antes ("prestige.2").
Prestige.alto <- Prestige[(Prestige$prestige.2=="alto"),]
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más bajo.
Prestige.bajo <- Prestige[(Prestige$prestige.2=="bajo"),]
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas. Usemos las funcion "rbind" (por "row bind", que "pegador de filas")
Prestige.nuevo = rbind(Prestige.alto, Prestige.bajo)
table(Prestige.nuevo$prestige.2)
Prestige.alto.columnas.desordenadas = data.frame(
Prestige.alto$income
)
Prestige.alto.columnas.desordenadas
Prestige.alto.columnas.desordenadas = data.frame(
# Me salto "education" que es primero, y la pongo al final
Prestige.alto$income, # 2
Prestige.alto$women, # 3
Prestige.alto$prestige, # 4
Prestige.alto$census, # 5
Prestige.alto$type, # 6
Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
# Ahora mergiemos Prestige.bajo (que sigue ordenada, i.e. con "education" primero) con Prestige.alto.columnas.desordenadas (que la "desordenamos" poniendo "education" al final)
Prestige.nuevo.ordenado.desordenado = rbind(Prestige.bajo, Prestige.alto.columnas.desordenadas)
?rbind
# No. No nos deja. El orden de las columnas DEBE ser igual en el paquete "rbind"
colnames(Prestige.bajo)
colnames(Prestige.alto.columnas.desordenadas)
Prestige.alto.columnas.desordenadas = data.frame(
# Me salto "education" que es primero, y la pongo al final
income = Prestige.alto$income, # 2
women = Prestige.alto$women, # 3
women = Prestige.alto$women, # 4
Prestige.alto$census, # 5
Prestige.alto$type, # 6
Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
colnames(Prestige.alto.columnas.desordenadas)
# No. No nos deja. El orden de las columnas DEBE ser igual en el paquete "rbind"
colnames(Prestige.bajo)
Prestige.alto.columnas.desordenadas = data.frame(
# Me salto "education" que es primero, y la pongo al final
income = Prestige.alto$income, # 2
women = Prestige.alto$women, # 3
prestige = Prestige.alto$prestige, # 4
census = Prestige.alto$census, # 5
type = Prestige.alto$type, # 6
prestige.2 = Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
education = Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
# No. No nos deja. El orden de las columnas DEBE ser igual en el paquete "rbind"
colnames(Prestige.bajo)
colnames(Prestige.alto.columnas.desordenadas)
# Ahora mergiemos Prestige.bajo (que sigue ordenada, i.e. con "education" primero) con Prestige.alto.columnas.desordenadas (que la "desordenamos" poniendo "education" al final)
Prestige.nuevo.ordenado.desordenado = rbind(Prestige.bajo, Prestige.alto.columnas.desordenadas)
colnames(Prestige.alto)
colnames(Prestige.bajo)
colnames(Prestige.alto.columnas.desordenadas)
Prestige.alto.columnas.desordenadas = as.data.frame(
# Me salto "education" que es primero, y la pongo al final
income = Prestige.alto$income, # 2
women = Prestige.alto$women, # 3
prestige = Prestige.alto$prestige, # 4
census = Prestige.alto$census, # 5
type = Prestige.alto$type, # 6
prestige.2 = Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
education = Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
Prestige.alto.columnas.desordenadas = data.frame(
# Me salto "education" que es primero, y la pongo al final
income = Prestige.alto$income, # 2
women = Prestige.alto$women, # 3
prestige = Prestige.alto$prestige, # 4
census = Prestige.alto$census, # 5
type = Prestige.alto$type, # 6
prestige.2 = Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
education = Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
colnames(Prestige.alto.columnas.desordenadas)
colnames(Prestige.bajo)
# Necesitan estar las columnas ordenadas?
Prestige.alto.columnas.desordenadas = data.frame(
# Me salto "education" que es primero, y la pongo al final
income = Prestige.alto$income, # 2
women = Prestige.alto$women, # 3
prestige = Prestige.alto$prestige, # 4
census = Prestige.alto$census, # 5
type = Prestige.alto$type, # 6
prestige.2 = Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
education = Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
colnames(Prestige.alto)
colnames(Prestige.bajo)
colnames(Prestige.alto.columnas.desordenadas)
colnames(Prestige.alto.columnas.desordenadas)
colnames(Prestige.alto) == colnames(Prestige.bajo)
colnames(Prestige.alto.columnas.desordenadas)
colnames(Prestige.alto)
colnames(Prestige.alto.columnas.desordenadas)
# Ahora mergiemos Prestige.bajo (que sigue ordenada, i.e. con "education" primero) con Prestige.alto.columnas.desordenadas (que la "desordenamos" poniendo "education" al final)
Prestige.nuevo.ordenado.desordenado = rbind(Prestige.bajo, Prestige.alto.columnas.desordenadas)
hist(Prestige$women) # Grafico Basico: "histograma". Plotiemos el % de mujeres en las distintas profesiones. Notas algo raro?
hist(Prestige$women, breaks=100) # Veamos esto con mas detalles. Agreguemos mas breaks (cortes, en columnas). Notas algo raro?
hist(Prestige$women) # Grafico Basico: "histograma". Plotiemos el % de mujeres en las distintas profesiones. Notas algo raro?
# Debido a este problema, tendremos que calcular el log de la variable "women"
## 1. Qué es el logaritmo de un numero?
## 2. Por qué necesitamos sacarlo?
## 3. Cual es el problema que tenemos abajo?
log(Prestige$women) # que problema tenemos?
Prestige$women
Prestige$women.mas.uno = Prestige$women+1
## Inspeccionemos...
head(Prestige)
# 5. Por que esto soliona nuestro problema?
# 6. Cual es el log de 1?
Prestige$log.women.mas.uno = log(Prestige$women.mas.uno)
head(Prestige) # Veamos...
hist(Prestige$log.women.mas.uno, breaks = 10) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$women) # Grafico Basico: "histograma". Plotiemos el % de mujeres en las distintas profesiones. Notas algo raro?
Prestige$women
hist(Prestige$women, breaks = 10) # Comparemos con antes
hist(Prestige$log.women.mas.uno, breaks = 10) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$women, breaks = 6) # Comparemos con antes
hist(Prestige$log.women.mas.uno, breaks = 6) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$income) # Grafico Basico: "histograma". Plotiemos el % de mujeres en las distintas profesiones. Notas algo raro?
hist(Prestige$income, breaks=100) # Veamos esto con mas detalles. Agreguemos mas breaks (cortes, en columnas). Notas algo raro?
log(Prestige$income)
summary(log(Prestige$income))
Prestige$income.log = log(Prestige$income)
hist(Prestige$income, main="Antes")
hist(Prestige$income.log, main="Despues")
hist(Prestige$income, main="Antes", breaks=8)
hist(Prestige$income.log, main="Despues", breaks=8)
hist(Prestige$income, main="Antes", breaks=10)
hist(Prestige$income.log, main="Despues", breaks=10)
hist(Prestige$income, main="Antes", breaks=10)
hist(Prestige$income.log, main="Despues", breaks=10)
hist(Prestige$income, main="Antes", breaks=10)
hist(Prestige$income.log, main="Despues", breaks=10)
log(Prestige$women)
Prestige$women
log(1)
##############################
# Cleaning
##############################
cat("\014")
rm(list=ls())
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
library(car) # ahora, carguemos la base de datos, que viene en la libreria "car"
## Resumen del df
head(Prestige)
### que columnas tiene el DF Prestige?
colnames(Prestige)
### DF1 tendra todo menos "education", "income", "women", "prestige"
Prestige.drop.1 = select(Prestige,-c(type, census))
colnames(Prestige.drop.1)
### DF1 tendra todo menos "education", "income", "women", "prestige"
Prestige.drop.1 = select(Prestige,-c(type, census))
library(dplyr)
### DF1 tendra todo menos "education", "income", "women", "prestige"
Prestige.drop.1 = select(Prestige,-c(type, census))
colnames(Prestige.drop.1)
### DF2 tendra todo menos "income"   "prestige" "census"   "type"
Prestige.drop.2 = select(Prestige,-c(education, women))
colnames(Prestige.drop.2)
# OK, volvamos al merge con variable numerica. Para hacer merge con variable numerica, tenemos que asegurarnos que la variable en comun sea exactamente igual. (En este caso, sabemos que es asi, porque nosotros acabamos de partir la base en dos; pero en otras situaciones, no lo sabremos. Suponiendo que la base de datos es GIGANTE, y que no podemos ir revisando fila por fila, La unica manera de solucionarlo es la siguiente:
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
table(Prestige.drop.1$income == Prestige.drop.2$income)
data.frame(
Prestige.drop.1$income,
Prestige.drop.2$income
)[1:20]
as.data.frame(
Prestige.drop.1$income,
Prestige.drop.2$income
)[1:20]
data.frame(
Prestige.drop.1$income,
Prestige.drop.2$income
)
rev(Prestige.drop.1$income) == Prestige.drop.2$income # No, no son iguales.
table(rev(Prestige.drop.1$income) == Prestige.drop.2$income) # No, no son iguales. Pero, atencion, hay dos observaciones que por CASUALIDAD son iguales! Veamos cuales son.
# Fijense como "nestie" (de "nested") varios comandos.
View(
data.frame(
Prestige.drop.1$income,
Prestige.drop.2$income,
c(rev(Prestige.drop.1$income) == Prestige.drop.2$income)
)
)
## Manera usando lenguaje de programacion
Prestige[Prestige$income=="3485",]
# En situaciones reales, nunca los datos estaran ordenados. Esta vez haremos un "merge desordenado".
# Primero, desordenemos "Prestige.drop.1$income". Ocuparemos un comando para hacer un "reverse", y poner todo al reves.
Prestige.drop.1$income = rev(Prestige.drop.1$income) # "rev" de "reverse"
# Veamos que hicimos...
View(data.frame(Prestige.drop.1$income, Prestige.drop.2$income))
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
Prestige.merge
Prestige.merge.recontra.asegurados <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income", "prestige"))
nrow(Prestige.merge.recontra.asegurados)
nrow(Prestige)
Prestige.drop.1$income <- rev(Prestige.drop.1$income)
# Mergiemos de nuevo...
Prestige.merge.recontra.asegurados <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income", "prestige"))
Prestige.drop.1$income == Prestige.drop.2$income # Ambas columnas son iguales.
Prestige.drop.1 = select(Prestige,-c(type, census))
Prestige.drop.2 = select(Prestige,-c(education, women))
# Ahora que sabemos que la columna "income" del DF Prestige.drop.1 esta desordenada, tratemos de "mergiar"
Prestige.merge <- merge(Prestige.drop.1, Prestige.drop.2, by=c("income"))
View(Prestige.merge)
is.na(Prestige.merge$type)
table(is.na(Prestige.merge$type))
is.na)
is.na(Prestige)
is.na(Prestige$type)
table(is.na(Prestige$type))
View(Prestige)
mean(Prestige$prestige)
# OK. Para mostrar como anadir filas, partamos la base Prestige en dos: en las profesiones con "alto" y "bajo" prestigio.
Prestige$prestige.2 <- ifelse(Prestige$prestige > mean(Prestige$prestige), "alto","bajo")
View(Prestige)
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más altas. Usemos la var que habiamos creado antes ("prestige.2").
Prestige.alto <- Prestige[(Prestige$prestige.2=="alto"),]
# creemos otro dataframe donde sólo estén las profesiones con el prestigio más bajo.
Prestige.bajo <- Prestige[(Prestige$prestige.2=="bajo"),]
## Hemos partido el DF "Prestige" en dos. Ahora, volvamos a juntar ambas. Usemos las funcion "rbind" (por "row bind", que "pegador de filas")
Prestige.nuevo = rbind(Prestige.alto, Prestige.bajo)
nrow(Prestige.nuevo)
colnames(Prestige)
Prestige.alto.columnas.desordenadas = data.frame(
# Me salto "education" que es primero, y la pongo al final
income = Prestige.alto$income, # 2
women = Prestige.alto$women, # 3
prestige = Prestige.alto$prestige, # 4
census = Prestige.alto$census, # 5
type = Prestige.alto$type, # 6
prestige.2 = Prestige.alto$prestige.2, # 7, siendo esta la variable que inventamos recien.
education = Prestige.alto$education # 1, siendo esta variable la que va primero en Prestige.alto y Prestige.bajo
)
# Verifiquemos que las columnas estan desordenadas
colnames(Prestige.alto) == colnames(Prestige.bajo)
colnames(Prestige.alto)
colnames(Prestige.alto.columnas.desordenadas)
# Ahora mergiemos Prestige.bajo (que sigue ordenada, i.e. con "education" primero) con Prestige.alto.columnas.desordenadas (que la "desordenamos" poniendo "education" al final)
Prestige.nuevo.ordenado.desordenado = rbind(Prestige.bajo, Prestige.alto.columnas.desordenadas)
hist(Prestige$income) # Grafico Basico: "histograma". Plotiemos el income de las distintas profesiones. Notas algo raro?
hist(Prestige$income, breaks=100) # Veamos esto con mas detalles. Agreguemos mas breaks (cortes, en columnas). Notas algo raro?
?log
## 1. Qué es el logaritmo de un numero?
## 2. Por qué necesitamos sacarlo?
log(Prestige$income)
Prestige$income
log(Prestige$income)
Prestige$income.log = log(Prestige$income)
hist(Prestige$income, main="Antes", breaks=10)
hist(Prestige$income.log, main="Despues", breaks=10)
Prestige$women
log(Prestige$women)
# Debenmos solucionar nuestro problema. Sumemos 1 a la variable women
Prestige$women.mas.uno = Prestige$women+1
Prestige$women+1
Prestige$women
# 5. Por que esto soluciona nuestro problema?
# 6. Cual es el log de 1?
Prestige$log.women.mas.uno = log(Prestige$women.mas.uno)
Prestige$log.women.mas.uno
hist(Prestige$log.women.mas.uno, breaks = 5) # Ahora grafiquemos de nuevo, y veamos si el problema se resuelve.
hist(Prestige$women, breaks = 5) # Comparemos con antes
?merge
