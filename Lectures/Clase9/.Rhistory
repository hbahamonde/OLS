c(3,5,7),
nrow = 3,
ncol = 1
)
###########################
# transponer x con comando "t"
###########################
t(x)
###########################
# x'x
###########################
x.transp%*%x
###########################
# x'x
###########################
t(x)%*%x
inv(t(x)%*%x)
options(scipen=999)
inv(t(x) %*% x)%*%t(x)%*%y # beta
cat("\014")
graphics.off()
rm(list=ls())
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
x
c(1,1,1,2,7,3,2,4,6)
matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol= 2
)
matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol= 3
)
c(1,1,1,2,7,3,2,4,6)
# definir x
=======
x = matrix(
c(1,1,1,1,1,2,1,3),
nrow = 4,
ncol = 2
)
# definir y
y = matrix(
c(1,2,3,4),
nrow = 4,
ncol = 1
)
# inverse
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(matlib)
inv(x)
x
c(1,1,1,2,
nrow = 4,
ncol = 2
)
c(1,1,1,2,
nrow = 2,
ncol = 2
)
# definir x
x = matrix(
c(1,1,1,2),
nrow = 2,
ncol = 2
)
inv(x)
# definir y
y = matrix(
c(1,2),
nrow = 2,
ncol = 2
)
inv(x)
x
# transponer
t(x)
# transponer
x.trasp = t(x)
# x'x
x.trasp*t
# x'x
x.trasp*x
x.trasp
x
# x'x
x.trasp*x
x
x.trasp
t(x)
# definir x
x = matrix(
c(1,3,2,4),
nrow = 2,
ncol = 2
)
x
# transponer x con comando "t"
x.trasp = t(x)
x.trasp
# x'x
x.trasp*x
x
# definir x
x = matrix(
c(1,3,2,4),
nrow = 2,
ncol = 2
)
x
# definir x
x = matrix(
c(1,1,3,2,1,4),
nrow = 3,
ncol = 2
)
x
# definir x
x = matrix(
c(1,1,1,2,3,4),
nrow = 3,
ncol = 2
)
x
# transponer x con comando "t"
x.trasp = t(x)
inv(x)
# definir x
x = matrix(
c(1,1,1,2,3,4,5,6,7),
nrow = 3,
ncol = 3
)
inv(x)
x
Inv(x)
Inverse(x)
# definir x
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
Inverse(x)
inv(x)
# definir x
x = matrix(
c(1,1,2,7,2,6),
nrow = 3,
ncol = 3
)
inv(x)
>>>>>>> master
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
x
<<<<<<< HEAD
c(3,5,7)
=======
# definir x
x = matrix(
c(1,1,1,2,7,3,5,4,6),
nrow = 3,
ncol = 3
)
inv(x)
# definir y
>>>>>>> master
y = matrix(
c(3,5,7),
nrow = 3,
ncol = 1
)
y
<<<<<<< HEAD
x
t(x)
t(x) %*% x
inv(
t(x)%*%x
)
inv(t(x) %*% x)%*%t(x)%*%y # beta
lm(y~x, data)
data = data.frame(x,y)
data
lm(y~x, data)
lm(y~x, data)
lm(y~x, data)
inv(t(x) %*% x)%*%t(x)%*%y # beta
Creemos una base de datos imaginaria
base = data.frame(
nombre = c("Pedro", "Juan", "Diego"),
educacion = c(57,50,61), # vector de educacion
prestigio = c(64,53,67)
)
modelo = lm(prestigio ~ educacion, data = base)
modelo
x=base$educacion # crea objeto
y=base$prestigio  # crea objeto
lm.out <- lm(y ~ x) # estima modelo de nuevo. el mismo modelo.
newx = seq(min(x),max(x),by = 1) # crea sequencia de numeros para el rango X del grafico
conf_interval <- predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95) # usando el modelo estimado, predice (a) distintos valores de educacion NO OBSERVADOS (fit), y el 95% de intervalo de confianza, con "lower bound" o "lwr" (parte de ABAJO del intervalo), y "upper bound" o "upr" (parte de ARRIBA del intervalo).
plot(x, y, xlab="Educ", ylab="Prest", main="Regression", ylim = c(30,90)) # ploteamos
abline(lm.out, col="lightblue") # agregamos linea "fit"
lines(newx, conf_interval[,2], col="blue", lty=2) # lower bound
lines(newx, conf_interval[,3], col="blue", lty=2) # upper bound
=======
# transponer x con comando "t"
x.trasp = t(x)
x.trasp
# transponer x con comando "t"
x.trasp = t(x)
x.trasp
# x'x
x.trasp*x
# x'x
x.trasp%*%x
x.trasp
# x'x
x.trasp%*%x
x
# definir x
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
x
# transponer x con comando "t"
x.trasp = t(x)
# x'x
x.trasp%*%x
inv(x)
# x'x
x.trasp%*%x
# x'x
x.transp.x = x.transp%*%x
# transponer x con comando "t"
x.transp = t(x)
# x'x
x.transp.x = x.transp%*%x
## primero, encontrar determinante
det(x.transp.x)
x.transp.x
?det
## primero, encontrar determinante
determinant(x.transp.x)
x.transp.x
## primero, encontrar determinante
det(x.transp.x)
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
X
X
x
inv(x)
-72/324
62*56
(62*56)-(50*50)
(12*56)-(12*50)
(12*50)-(12*62)
(12*56)-(50*12)
(3*56)-(12*12)
(3*50)-(12*12)
(12*50)-(62*12)
(3*50)-(12*12)
(3*62)-(12*12)
x.transp%*%x
inv(x.transp.x)
## primero, encontrar determinante
det(x.transp.x)
x
-72/324
144/324
-72/324
-24/324
-6/324
144/324
inv(x.transp.x)
-6/324
-42/324
(62*56)-(50*50)
x.transp.x
62*56
62*56-(50*50)
## primero, encontrar determinante
det(x.transp.x)
x.transp.x
## primero, encontrar determinante
det(x.transp.x)
3*(62*56-50*50)
2500-3472
972/324
inv(x.transp.x)
-72/324
144/324
(50*50)-()62*56
(50*50)-(62*56)
972/324
972/324
-72/324
-144/324
-72/324
24/324
-6/324
-144/324
-6/324
42/324
x.transp.x.inv = inv(x.transp.x)
x.transp.x.inv
x.transp.x.inv %*% x.transp
x.transp.x.inv %*% x.transp
x.transp.x.inv.x.transp = x.transp.x.inv %*% x.transp
x.transp.x.inv.x.transp %*% y
inv(t(x) %*% x)
inv(t(x) %*% x)%*%t(x)%*%y
options(scipen=999)
inv(t(x) %*% x)%*%t(x)%*%y
data = data.frame(x,y)
data
lm(y~x, data)
y
inv(x.transp%*%x)
>>>>>>> master
cat("\014")
rm(list=ls())
graphics.off()
# definir x
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
# definir y
y = matrix(
c(3,5,7),
nrow = 3,
ncol = 1
)
t(x)
x
t(x) %*% x
4+49+9
4+49+9
4+28+18
4+28+18
4+16+36
det(x.transp%*%x)
p_load(matlib)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(matlib)
inv(t(x)%*%x)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=999)
inv(t(x) %*% x)%*%t(x)%*%y # beta
data.frame(x,y)
lm(y~x, data)
# Usando el comando "lm"
data = data.frame(x,y)
lm(y~x, data)
summary(lm(y~x, data)
)
inv(t(x) %*% x)%*%t(x)%*%y # beta
x
x[2:3,]
x[,2:3]
# Usando el comando "lm"
data = data.frame(x[,2:3],y)
lm(y~x, data)
data
x[,2:3]
y
# Usando el comando "lm"
data = data.frame(
x=x[,2:3],
y=y)
data
lm(y~x.1+x.2, data)
det(t(x)%*%x)
## segundo, encontrar Adjacente
p_load(igraph)
get.adjacency(graph.edgelist(as.matrix(x), directed=FALSE))
x
x %*% t(x)
get.adjacency(x)
get.adjacency(graph.edgelist(as.matrix(x)))
dat <- read.table(text="A B
1 2
1 3
1 4
2 5
3 7", header=TRUE)
dat
get.adjacency(graph.edgelist(as.matrix(dat), directed=FALSE))
x
dat
dat <- read.table(x)
dat <- read.table(text=x)
as.character(x)
dat <- read.table(text= as.character(x), header=F)
dat
get.adjacency(graph.edgelist(as.matrix(dat), directed=FALSE))
as.character(x)
dat <- read.table(text= as.character(x), header=T)
dat
dat <- read.table(text= as.chara"A B  1 2 1 3 1 4 2 5 3 7", header=TRUE)
dat <- read.table(text= "A B  1 2 1 3 1 4 2 5 3 7", header=TRUE)
dat
get.adjacency(graph.edgelist(as.matrix(dat), directed=FALSE))
cat("\014")
rm(list=ls())
graphics.off()
# definir x
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
# definir y
y = matrix(
c(3,5,7),
nrow = 3,
ncol = 1
)
###########################
# transponer x con comando "t"
###########################
t(x)
###########################
# x'x
###########################
t(x) %*% x
p_load(matlib)
inv(t(x)%*%x)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(matlib)
inv(t(x)%*%x)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=999)
inv(t(x) %*% x)%*%t(x)%*%y # beta
cat("\014")
graphics.off()
rm(list=ls())
# Clase 12
cat("\014")
rm(list=ls())
graphics.off()
rm(list=ls())
x = matrix(
c(1,1,1,2,7,3,2,4,6),
nrow = 3,
ncol = 3
)
x
y = matrix(
c(3,5,7),
nrow = 3,
ncol = 1
)
y
x
###########################
# transponer x con comando "t"
###########################
t(x)
t(x) %*% x
det(t(x)%*%x)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(matlib)
inv(t(x)%*%x)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=-100)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=9999999999999999999999999999999999999999)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=999)
# En Matriz
options(scipen=9)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=2)
inv(t(x) %*% x)%*%t(x)%*%y # beta
# En Matriz
options(scipen=99)
inv(t(x) %*% x)%*%t(x)%*%y # beta
data = data.frame(
x=x[,2:3],
y=y)
data
View(data)
lm(y ~ x.1 + x.2, data) # linear model
modelo = lm(y ~ x.1 + x.2, data) # linear model
summary(modelo)
summary(modelo)
