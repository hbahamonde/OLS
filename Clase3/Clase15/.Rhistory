cat("\014")
rm(list=ls())
graphics.off()
# loads pacman
if (!require("pacman")) install.packages("pacman"); library(pacman)
########################################################
# Merge Trade-COW y National Material Capabilities-COW
########################################################
# load National Material Capabilities-COW
p_load(foreign)
mnc.d <- read.dta("/Users/hectorbahamonde/RU/research/Bahamonde_Kovac/NMC_5_0.dta")
# load Trade-COW
p_load(foreign)
trade.d <- read.csv("/Users/hectorbahamonde/RU/research/Bahamonde_Kovac/National_COW_4.0.csv")
# merge
cow.d = merge(mnc.d, trade.d, by=c("ccode","year"))
# subset variables
cow.d <- cow.d[c("ccode", "year", "milex", "milper", "irst", "pec")]
# Format Country Name
country = data.frame(
statename = trade.d$statename,
ccode = trade.d$ccode,
year = trade.d$year
)
cow.d = merge(cow.d, country, by = c("ccode", "year"))
cow.d$statename <- as.character(cow.d$statename)
########################################################
# GVARX
########################################################
# install.packages("GVARX")
library(GVARX)
# https://www.rdocumentation.org/packages/GVARX/versions/1.1/topics/grangerGVAR
# data("tradeweightx")
# rename time-ID and panel-ID vars.
colnames(cow.d)[which(names(cow.d) == "statename")] <- "ID"
colnames(cow.d)[which(names(cow.d) == "year")] <- "Time"
# (1)
# Be adviced, this function only computes Granger causality tests for
# BIVARIATE specifications. Will compute different models for both var types.
# (2)
# Weight matrix will be the COW Trade DF.
# reorder time-ID and panel-ID vars.
cow.d.1 = subset(cow.d,  select=c("ID", "Time","milper", "irst")) # complete var names: "statename", "year", "milex", "milper", "irst", "pec"
# check if panels are "strictly balanced?
p_load(plm)
is.pbalanced(cow.d.1) # False
dat = cow.d.1
dat$Time = as.Date(as.character(dat$Time), "%Y")
dat$Time
dat$Time<=1913
dat[dat$Time<=1913]
dat[dat$Time<=1913,]
# pre dataset
dat.pre = dat[dat$Time<=1913,]
# post dataset
dat.post = dat[dat$Time>=1945,]
table(dat.pre$ID)
dat.pre <- pdata.frame(dat.pre, index=c("ID","Time"))
dat.pre = make.pbalanced(dat.pre, balance.type = "shared.individuals", index = c('ID', 'Time') ) # shared.individuals / fill
dat.pre = make.pbalanced(dat.pre, balance.type = "shared.time", index = c('ID', 'Time') ) # shared.individuals / fill
# pre dataset
dat.pre = dat[dat$Time<=1913,]
dat.pre <- pdata.frame(dat.pre, index=c("ID","Time"))
dat.pre = make.pbalanced(dat.pre, balance.type = "shared.time", index = c('ID', 'Time') ) # shared.individuals / fill
# pre dataset
dat.pre = dat[dat$Time<=1913,]
# post dataset
dat.post = dat[dat$Time>=1945,]
dat.pre <- pdata.frame(dat.pre, index=c("ID","Time"))
dat.pre = make.pbalanced(dat.pre, balance.type = "shared.individuals", index = c('ID', 'Time') ) # shared.individuals / fill
is.pbalanced(dat.pre)
table(dat.pre$ID)
unique(table(dat.pre$ID))
unique(dat.pre$ID)
# balancing pre
dat.post <- pdata.frame(dat.post, index=c("ID","Time"))
dat.post = make.pbalanced(dat.post, balance.type = "shared.individuals", index = c('ID', 'Time') ) # shared.individuals / fill
is.pbalanced(dat.post)
unique(dat.post$ID)
table(dat.post$ID)
unique(dat.post$ID)
ID = as.vector(as.character(dat.post$ID))
ID
Time
Time = as.character(as.Date(dat.post$Time, "%Y"))
milper = as.vector(as.numeric(dat.post$milper))
irst = as.vector(as.numeric(dat.post$irst))
dat.post = data.frame(ID,Time,milper,irst)
View(dat.post)
dat.post$Time = as.character(as.Date(dat.post$Time, "%Y"))
View(dat.post)
ID = as.vector(as.character(dat.post$ID))
Time = as.character(as.Date(dat.post$Time, "%Y"))
milper = as.vector(as.numeric(dat.post$milper))
irst = as.vector(as.numeric(dat.post$irst))
dat.post = data.frame(ID,Time,milper,irst)
