plot(m1$residuals, dat$y1)
plot(m2$residuals, dat$y2)
plot(m3$residuals, dat$y3)
plot(m4$residuals, dat$y4)
plot(m1$residuals)
plot(m2$residuals)
plot(m3$residuals)
plot(m1$residuals)
plot(m2$residuals)
plot(m3$residuals)
plot(m4$residuals, dat$y4)
plot(m1$residuals, dat$y1)
plot(m2$residuals, dat$y2)
plot(m3$residuals, dat$y3)
plot(m4$residuals, dat$y4)
screenreg(list(m1,m2,m3,m4))
plot(allEffects(m4))
plot(allEffects(m3))
plot(allEffects(m2))
plot(dat$x1, dat$y1)
plot(dat$x2, dat$y2)
plot(m1$residuals, dat$y1)
plot(m2$residuals, dat$y2)
plot(m3$residuals, dat$y3)
plot(m4$residuals, dat$y4)
# 3.1
summary(m.1)
# 3.1
summary(m1)
summary(m2) # residuo tiene promedio 0, super bien.
summary(m3) # residuo tiene promedio 0, super bien.
summary(m4) # residuo tiene promedio 0, super bien.
attributes(summary(m1))
# 3.1
summary(m1)$residuals # residuo tiene promedio 0, super bien.
# 3.1
mean(summary(m1)$residuals) # residuo tiene promedio 0, super bien.
# 3.1
options(scipen = 100000)
mean(summary(m1)$residuals) # residuo tiene promedio 0, super bien.
mean(summary(m2)$residuals) # residuo tiene promedio 0, super bien.
mean(summary(m3)$residuals) # residuo tiene promedio 0, super bien.
mean(summary(m4)$residuals) # residuo tiene promedio 0, super bien.
# 3.2
summary(m1)$coefficients
# 3.2
summary(m1)$coefficients[,2]
# 3.2
summary(m1)$coefficients[,3]
# 3.2
summary(m1)$coefficients[3]
# 3.2
summary(m1)$coefficients[4]
# 3.2
summary(m1)$coefficients[4]
summary(m2)$coefficients[4]
summary(m3)$coefficients[4]
summary(m4)$coefficients[4]
# 3.3
plot(m1$residuals, dat$y1)
plot(m2$residuals, dat$y2)
plot(m3$residuals, dat$y3)
plot(m4$residuals, dat$y4)
# 3.3
plot(m1$residuals, dat$y1)
# 3.3
plot(m1$residuals, dat$y1);curve((x), col = "blue", add = TRUE) # ok.
plot(m1$residuals, dat$y1);curve((x), col = "blue", add = TRUE) # ok.
plot(m2$residuals, dat$y2);curve((x), col = "blue", add = TRUE) # residuos no tienen varianza constante.
# 3.3
plot(m1$residuals, dat$x1);curve((x), col = "blue", add = TRUE) # ok.
lines(dat$x1, predict(m1), col = "red")
plot(m1$residuals, dat$y1)
lines(dat$x1, predict(m1), col = "red")
dev.off()
dev.off()
plot(m1$residuals, dat$y1)
lines(dat$x1, predict(m1), col = "red")
ggplot(aes(dat$x1,predict(m1))) + geom_point() + geom_smooth()
library(ggplot2)
ggplot(aes(dat$x1,predict(m1))) + geom_point() + geom_smooth()
library(lattice)
xyplot(m1$residuals ~ dat$x1, type=c("smooth", "p"))
xyplot(m1$residuals ~ dat$y1, type=c("smooth", "p"))
xyplot(m2$residuals ~ dat$x2, type=c("smooth", "p"))
xyplot(m3$residuals ~ dat$x3, type=c("smooth", "p"))
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p"))
xyplot(m1$residuals ~ dat$x1, type=c("smooth", "p"))
xyplot(m2$residuals ~ dat$x2, type=c("smooth", "p"))
xyplot(m3$residuals ~ dat$x3, type=c("smooth", "p"))
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p"))
xyplot(m1$residuals ~ dat$y1, type=c("smooth", "p")) # ok.
xyplot(m2$residuals ~ dat$y2, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m3$residuals ~ dat$y3, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m4$residuals ~ dat$y4, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m1$residuals ~ dat$x1, type=c("smooth", "p")) # ok.
xyplot(m2$residuals ~ dat$x2, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m3$residuals ~ dat$x3, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p")) # residuos no tienen varianza constante.
library(car)
data(Prestige)
Prestige.model <- lm(prestige ~ income + education + women, data=Prestige)
summary(Prestige.model)
crPlot(Prestige.model, "income") # Problema.
crPlot(Prestige.model, "education") # no es exactamente lineal, pero es tolerable.
crPlot(Prestige.model, "women") # no hay relacion.
crPlot(Prestige.model, "income") # Problema.
crPlot(Prestige.model, "education") # no es exactamente lineal, pero es tolerable.
crPlot(Prestige.model, "women") # no hay relacion.
poly(income, 3)
# Estimemos una regresion no lineal
modelo.no.lineal = lm(prestige ~ poly(income, 3) + poly(education, 2) + women, data = Prestige)
modelo.no.lineal
summary(modelo.no.lineal)
modelo.lineal <- lm(prestige ~ income + education + women, data=Prestige)
modelo.lineal$residuals
mean(modelo.lineal$residuals)
summary(modelo.lineal)
attributes(modelo.lineal)
mean(summary(modelo.lineal)$residuals)
summary(summary(modelo.lineal)$residuals)
summary(summary(modelo.no.lineal)$residuals)
# install.packages("foreign")
library(foreign) # significa "foraneo"
load(url("https://github.com/hbahamonde/Metodos_de_Investigacion/raw/master/Lectures/Clase21/data.rdata"))
# cambia el nombre de la base de datos
dat = data_reg
# 1.1 Abajo, estima los modelos y guardalos
# A
m1 = lm(y1 ~ x1, dat)
# B
m2 = lm(y2 ~ x2, dat)
# C
m3 = lm(y3 ~ x3, dat)
# D
m4 = lm(y4 ~ x4, dat)
summary(summary(m1)$residuals)
summary(summary(m2)$residuals) # residuo tiene promedio 0, super bien.
summary(summary(m3)$residuals) # residuo tiene promedio 0, super bien.
summary(summary(m4)$residuals) # residuo tiene promedio 0, super bien.
xyplot(modelo.lineal$residuals ~ Prestige$prestige, type=c("smooth", "p"))
xyplot(modelo.no.lineal$residuals ~ Prestige$prestige, type=c("smooth", "p"))
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
plot(effect("poly(income, 3)", mod, default.levels=100, se=T))
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
plot(effect("poly(income, 3)", modelo.no.lineal, default.levels=100, se=T))
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
plot(effect("poly(income, 3)", modelo.no.lineal, se=T))
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
plot(effect("poly(income, 3)", modelo.no.lineal))
dev.off()
dev.off()
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
plot(effect("poly(income, 3)", modelo.no.lineal))
plot(effect("poly(education, 2)", modelo.no.lineal))
boxTidwell(prestige ~ income, ~ education + women, data=Prestige)
# OK. Sugiere que debemos elevar income al "0.08073"
modelo.no.lineal.box.tid = lm(prestige ~ I(income^0.08073) + education + women, data=Prestige)
plot(effect("I(income^0.08073)", modelo.no.lineal.box.tid)) # es el menos lineal de todos
income^0.08073
I(income^0.08073)
plot(effect("I(income^0.08073)", modelo.no.lineal.box.tid)) # es el menos lineal de todos
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$I(income^0.08073), type=c("smooth", "p")) # mal.
# estimemos un modelo nuevo, pero con "income" transformado
income.transformado = income^0.08073 # transformemos income
# estimemos un modelo nuevo, pero con "income" transformado
income.transformado = Prestige$income^0.08073 # transformemos income
income.transformado
xyplot(Prestige$prestige ~ Prestige$income, type=c("smooth", "p")) # mal.
xyplot(Prestige$prestige ~ Prestige$income.transformado, type=c("smooth", "p")) # mal.
# estimemos un modelo nuevo, pero con "income" transformado
income.transformado = Prestige$income^0.08073 # transformemos income
# estimemos un modelo nuevo, pero con "income" transformado
Prestige$income.transformado = Prestige$income^0.08073 # transformemos income
xyplot(Prestige$prestige ~ Prestige$income.transformado, type=c("smooth", "p")) # mal.
# veamos como se ve income "normal" y "transformado"
layout(matrix(1:2, nrow = 1)) # modifiquemos el plano donde graficamos.
xyplot(Prestige$prestige ~ Prestige$income, type=c("smooth", "p")) # mal.
xyplot(Prestige$prestige ~ Prestige$income.transformado, type=c("smooth", "p")) # mal.
dev.off()
dev.off()
# veamos como se ve income "normal" y "transformado"
layout(matrix(1:2, nrow = 1)) # modifiquemos el plano donde graficamos.
xyplot(Prestige$prestige ~ Prestige$income, type=c("smooth", "p")) # el "normal" esta mal porque no es lineal.
xyplot(Prestige$prestige ~ Prestige$income.transformado, type=c("smooth", "p")) # el transformado arregla el problema porque ahora si que tenemos una relacion lineal entre Y y X.
graphics.off()
graphics.off()
# veamos como se ve income "normal" y "transformado"
layout(matrix(1:2, nrow = 1)) # modifiquemos el plano donde graficamos.
xyplot(Prestige$prestige ~ Prestige$income, type=c("smooth", "p")) # el "normal" esta mal porque no es lineal.
xyplot(Prestige$prestige ~ Prestige$income.transformado, type=c("smooth", "p")) # el transformado arregla el problema porque ahora si que tenemos una relacion lineal entre Y y X.
modelo.no.lineal.box.tid = lm(prestige ~ income.transformado + education + women, data=Prestige)
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$I(income^0.08073), type=c("smooth", "p")) # mal.
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # mal.
xyplot(modelo.no.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.no.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.no.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
summary(summary(modelo.no.lineal.box.tid)$residuals)
summary(summary(modelo.no.lineal)$residuals)
library(lattice)
densityplot((modelo.no.lineal.box.tid)$residuals)
densityplot((modelo.no.lineal)$residuals)
densityplot((modelo.no.lineal.box.tid)$residuals)
densityplot((modelo.no.lineal)$residuals)
xyplot(modelo.no.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
# (2) Tomar el log de la variable no lineal (en este caso, "ingresos" o "income")
Prestige$log.income = log(income)
# (2) Tomar el log de la variable no lineal (en este caso, "ingresos" o "income")
Prestige$log.income = log(Prestige$income)
Prestige$log.income
densityplot(Prestige$income)
densityplot(Prestige$log.income)
densityplot(Prestige$income)
densityplot(Prestige$log.income)
densityplot(Prestige$income)
densityplot(Prestige$log.income)
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
par(mfrow=c(2,1))
plot(effect("poly(income, 3)", modelo.no.lineal)) # es el menos lineal de todos
plot(effect("poly(education, 2)", modelo.no.lineal)) # es el mas lineal.
# Grafiquemos el "aporte" NO LINEAL de las variables independientes
graphics.off()
par(mfrow=c(2,1))
plot(effect("poly(income, 3)", modelo.no.lineal)) # es el menos lineal de todos
plot(effect("poly(education, 2)", modelo.no.lineal)) # es el mas lineal.
## veamos como se ve cada variable
graphics.off()
par(mfrow=c(2,1))
library(lattice)
densityplot(Prestige$income)
densityplot(Prestige$log.income)
par(mfrow=c(1,1))
densityplot(Prestige$income)
densityplot(Prestige$log.income)
par(mfrow=c(2,1))
densityplot(Prestige$income)
densityplot(Prestige$log.income)
matrix(c(1,2)
matrix(c(1,2))
layout(matrix(c(1,2), 2, 2, byrow = TRUE))
densityplot(Prestige$income)
densityplot(Prestige$log.income)
par(mfrow=c(2,2))
## veamos como se ve cada variable
graphics.off()
par(mfrow=c(2,2))
densityplot(Prestige$income)
densityplot(Prestige$log.income)
modelo.log.income = lm(prestige ~ log.income + education + women, data=Prestige)
# modelo
modelo.log.income = lm(prestige ~ log.income + education + women, data=Prestige)
# resumen del modelo
summary(modelo.log.income)
# Hagamos un scatter entre los residuos y cada una de las x (transformada y normal)
xyplot(modelo.log.income$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.no.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
xyplot(modelo.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
# Hagamos un scatter entre los residuos y cada una de las x (transformada y normal)
xyplot(modelo.log.income$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
densityplot((modelo.no.lineal.box.tid)$residuals) # bien
densityplot((modelo.lineal)$residuals) # mas o menos no mas...
# Resumen de los residuos: modelo con "income" transformado y normal.
summary(summary(modelo.no.lineal.box.tid)$residuals)
summary(summary(modelo.lineal)$residuals)
# Hagamos un scatter entre los residuos y cada una de las x (transformada y normal)
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
# Resumen de los residuos: modelo con "income" transformado y normal.
summary(summary(modelo.no.lineal.box.tid)$residuals)
summary(summary(modelo.lineal)$residuals)
# Hagamos un scatter entre los residuos y cada una de las x (transformada y normal)
xyplot(modelo.no.lineal.box.tid$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # mal.
# Resumen de los residuos: modelo con "income" transformado y normal.
summary(summary(modelo.no.lineal.box.tid)$residuals)
summary(summary(modelo.lineal)$residuals)
densityplot((modelo.no.lineal.box.tid)$residuals) # bien
densityplot((modelo.lineal)$residuals) # mas o menos no mas...
# (2) Tomar el log de la variable no lineal (en este caso, "ingresos" o "income")
Prestige$log.income = log(Prestige$income)
densityplot(Prestige$income)
densityplot(Prestige$log.income)
# modelo
modelo.log.income = lm(prestige ~ log.income + education + women, data=Prestige)
# resumen del modelo
summary(modelo.log.income)
# Hagamos un scatter entre los residuos y cada una de las x (transformada y normal)
xyplot(modelo.log.income$residuals ~ Prestige$income.transformado, type=c("smooth", "p")) # bien.
xyplot(modelo.lineal$residuals ~ Prestige$income, type=c("smooth", "p")) # muy mal.
# Resumen de los residuos: modelo con "income" transformado y normal.
summary(summary(modelo.no.lineal.box.tid)$residuals)
summary(summary(modelo.lineal)$residuals)
library(foreign) # significa "foraneo"
load(url("https://github.com/hbahamonde/Metodos_de_Investigacion/raw/master/Lectures/Clase21/data.rdata"))
dat = data_reg
head(dat)
# A
m1 = lm(y1 ~ x1, dat)
# B
m2 = lm(y2 ~ x2, dat)
# C
m3 = lm(y3 ~ x3, dat)
# D
m4 = lm(y4 ~ x4, dat)
xyplot(m1$residuals ~ dat$x1, type=c("smooth", "p")) # ok.
xyplot(m2$residuals ~ dat$x2, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m3$residuals ~ dat$x3, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p")) # residuos no tienen varianza constante.
# veamos como se ven los problemas de "influence"
library(lattice)
xyplot(m3$residuals ~ dat$x3, type=c("smooth", "p")) # residuos no tienen varianza constante.
options(scipen=100000000) # increases threshold for scientific notation (it's got very small numbers).
dat$cooks.d <- cooks.distance(m3)
dat$cooks.d
dat
plot(dat$cooks.d)
graphics.off()
plot(dat$cooks.d)
xyplot(m2$residuals ~ dat$x2, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m3$residuals ~ dat$x3, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p")) # residuos no tienen varianza constante.
# grafiquemos los residuales
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p")) # residuos no tienen varianza constante.
dat$dffits = dffits(m4)
dat
options(scipen=100000000) # increases threshold for scientific notation (it's got very small numbers).
dat$dffits = dffits(m4)
dat
ols_plot_dffits(m4)
# install.packages("olsrr")
library(olsrr)
ols_plot_dffits(m4)
?dffits
influence.measures(model, infl = influence(m4))
influence.measures(m4, infl = influence(m4))
m4 = lm(y4 ~ x4, dat)
m4
# grafiquemos los residuales
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p"))
dffits(m4)
lm.influence(m4)$sigma
ols_plot_dffits(m4)
lm.influence(m4)
dat
4/nrow(dat)
?stdres
leverage.plot(m4)
leveragePlot(m4)
lm.influence(m4)
dat
ols_plot_cooksd_chart(m3)
# El punto de quiebre es 4/n.
4/nrow(dat)
ols_plot_dfbetas(m4)
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p")) # residuos no tienen varianza constante.
graphics.off()
xyplot(m4$residuals ~ dat$x4, type=c("smooth", "p")) # residuos no tienen varianza constante.
warnings()
summary(summary(m4)$residuals)
summary(m4)$residuals
dffits(m4)
ols_plot_dfbetas(m4)
graphics.off()
ols_plot_dfbetas(m4)
ols_plot_dffits(m4)
ols_plot_resid_stud(m4)
ols_plot_resid_stand(m4)
ols_plot_resid_lev(m4)
ols_plot_resid_stud_fit(m4)
ols_plot_hadi(m4)
ols_plot_resid_pot(m4)
model <- lm(read ~ write + math + science, data = hsb)
ols_plot_resid_lev(model)
model <- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
ols_plot_resid_pot(model)
mtcars
model$residuals
as.vector(model$residuals)
xyplot(model$residuals ~ mtcars$disp, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$disp, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$hp, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$qsec, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$disp, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$hp, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
xyplot(model$residuals ~ mtcars$qsec, type=c("smooth", "p")) # residuos no tienen varianza constante.
ols_plot_resid_pot(m4)
head(mtcars)
model <- lm(mpg ~ wt, data = mtcars)
xyplot(model$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
ols_plot_resid_pot(model)
dffits(m4)
dffits(model)
ols_plot_resid_pot(model)
ols_plot_resid_stud_fit(model)
ols_plot_resid_lev(model)
ols_plot_resid_pot(model)
model$residuals
ols_plot_resid_stud_fit(model)
xyplot(model$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
ols_plot_resid_pot(model)
model$residuals
ols_plot_resid_pot(model)
ols_plot_resid_stud_fit(model)
plot(model)
ols_plot_resid_stud_fit(model)
rownames(mtcars)
data.frame(
res = model$residuals
marca = rownames(mtcars)
)
data.frame(
res = model$residuals,
marca = rownames(mtcars)
)
data.frame(
res = model$residuals,
marca = rownames(mtcars),
fila = 1:nrow(mtcars)
)
# Estimemos un modelo con leverage
autos <- lm(mpg ~ wt, data = mtcars)
plot(autos$fitted, mtcars$mpg)
# Veamos
xyplot(model$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
# Dado que SI tenemos un problema, nuestro error debiera seguir algun patron.
# Es decir, debieramos NO ver una nube dispersa, y la linea debiera ser curva. Veamos.
xyplot(autos$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
# Ocupemos una funcion de R para detectar observaciones con leverage.
ols_plot_resid_stud_fit(autos)
# Dado que SI tenemos un problema, nuestro error debiera seguir algun patron.
# Es decir, debieramos NO ver una nube dispersa, y la linea debiera ser curva. Veamos.
xyplot(autos$residuals ~ mtcars$wt, type=c("smooth", "p")) # residuos no tienen varianza constante.
# ahora, grafiquemos lo que vemos vs. lo que predecimos
plot(autos$fitted, mtcars$mpg) # Donde esta el problema?
# Inventemos las variables independientes
set.seed(2019)
x1 = rnorm(1000, 10)
x2 = rnorm(1000, 20)
x3 = exp(x2)
x3
# Establecer el valor real de los betas: conocemos con exactitud los valores,
# porque nosotros los creamos!
b1 = 1
b2 = -100
b3 = 500
# El "VERDADERO MODELO": "y" es una combinacion lineal de todas las variables.
y = b1*x1 + b2*x2 + b3*x3 + e
# Hagamos una regresion.
modelo.completo = lm(y ~ x1 + x2 + x3)
# Definamos que, como debiera ser, el error tiene promedio cero.
e = rnorm(1000, 0)
# Establecer el valor real de los betas: conocemos con exactitud los valores,
# porque nosotros los creamos!
b1 = 1
b2 = -100
b3 = 500
# El "VERDADERO MODELO": "y" es una combinacion lineal de todas las variables.
y = b1*x1 + b2*x2 + b3*x3 + e
# Hagamos una regresion.
modelo.completo = lm(y ~ x1 + x2 + x3)
summary(modelo.completo) # sin sorpresa, los betas son los mismos que inventamos nosotros.
# Hagamos una regresion.
modelo.completo = lm(y ~ x1 + x2)
summary(modelo.completo) # sin sorpresa, los betas son los mismos que inventamos nosotros.
set.seed(2019)
x1 = rnorm(1000, 10)
x2 = rnorm(1000, 20)
x3 = (x2*x2)/1000
# Definamos que, como debiera ser, el error tiene promedio cero.
e = rnorm(1000, 0)
# Establecer el valor real de los betas: conocemos con exactitud los valores,
# porque nosotros los creamos!
b1 = 1
b2 = -100
b3 = 500
# El "VERDADERO MODELO": "y" es una combinacion lineal de todas las variables.
y = b1*x1 + b2*x2 + b3*x3 + e
# Hagamos una regresion.
modelo.completo = lm(y ~ x1 + x2)
summary(modelo.completo) # sin sorpresa, los betas son los mismos que inventamos nosotros.
# Hagamos una regresion.
modelo.completo = lm(y ~ x1 + x2 + x3)
summary(modelo.completo) # sin sorpresa, los betas son los mismos que inventamos nosotros.
x1
x2
x3
# Hagamos una regresion.
modelo.completo = lm(y ~ x1 + x2 + x3)
summary(modelo.completo) # sin sorpresa, los betas son los mismos que inventamos nosotros.
vif(modelo.completo)
# Modelo completo
modelo.completo = lm(y ~ x1 + x2 + x3)
summary(modelo.completo)
# Modelo completo
modelo.incompleto = lm(y ~ x1 + x2)
summary(modelo.incompleto)
vif(modelo.completo)
vif(modelo.incompleto)
t(as.matrix(1,1,1,1,1)) %*% as.matrix(1,1,1,1,1)
as.matrix(1,1,1,1,1)
as.matrix(1,1,1,1,1, nrows=5)
matrix(1,1,1,1,1, nrows=5)
matrix(1,1,1,1,1, ncol = 1)
matrix(c(1,1,1,1,1), ncol = 1)
unos = matrix(c(1,1,1,1,1), ncol = 1)
t(unos) %*% unos
unos %*% t(unos)
